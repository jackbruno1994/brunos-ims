apiVersion: v1
kind: ConfigMap
metadata:
  name: brunos-ims-config
  namespace: brunos-ims
data:
  NODE_ENV: "production"
  PORT: "3001"
  CORS_ORIGIN: "https://brunos-ims.example.com"
  API_VERSION: "v1"
---
apiVersion: v1
kind: Secret
metadata:
  name: brunos-ims-secrets
  namespace: brunos-ims
type: Opaque
stringData:
  DATABASE_URL: "postgresql://postgres:password@postgres:5432/brunos_ims?schema=public"
  JWT_SECRET: "your-super-secret-jwt-key-change-this-in-production"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: brunos-ims-backend
  namespace: brunos-ims
  labels:
    app: brunos-ims-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: brunos-ims-backend
  template:
    metadata:
      labels:
        app: brunos-ims-backend
    spec:
      containers:
      - name: backend
        image: brunos-ims/backend:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: brunos-ims-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: brunos-ims-config
              key: PORT
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: brunos-ims-config
              key: CORS_ORIGIN
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: brunos-ims-secrets
              key: DATABASE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: brunos-ims-secrets
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: brunos-ims-backend-service
  namespace: brunos-ims
  labels:
    app: brunos-ims-backend
spec:
  selector:
    app: brunos-ims-backend
  ports:
  - port: 80
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: brunos-ims-ingress
  namespace: brunos-ims
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.brunos-ims.example.com
    secretName: brunos-ims-tls
  rules:
  - host: api.brunos-ims.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: brunos-ims-backend-service
            port:
              number: 80