#!/bin/bash

# PO System Demo Script
# This script demonstrates the complete PO processing workflow

echo "üöÄ Starting Bruno's IMS PO System Demo"
echo "======================================"

# Check if server is running
if ! curl -s http://localhost:3001/health > /dev/null; then
    echo "‚ùå Server is not running. Please start with: npm run dev"
    exit 1
fi

echo "‚úÖ Server is running"
echo ""

# 1. Create a Purchase Order
echo "üìù Step 1: Creating a new Purchase Order..."
PO_RESPONSE=$(curl -s -X POST http://localhost:3001/api/po/create \
  -H "Content-Type: application/json" \
  -d '{
    "supplierId": "supplier-123",
    "supplierName": "Fresh Foods Supplier",
    "restaurantId": "restaurant-456",
    "lineItems": [
      {
        "itemId": "item-tomatoes",
        "itemName": "Fresh Tomatoes",
        "quantity": 50,
        "unitPrice": 2.50
      },
      {
        "itemId": "item-oil",
        "itemName": "Extra Virgin Olive Oil",
        "quantity": 10,
        "unitPrice": 15.00
      }
    ],
    "notes": "Urgent delivery required for weekend special"
  }')

PO_ID=$(echo $PO_RESPONSE | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
PO_NUMBER=$(echo $PO_RESPONSE | grep -o '"poNumber":"[^"]*"' | cut -d'"' -f4)

echo "‚úÖ Created PO: $PO_NUMBER (ID: $PO_ID)"
echo "   Total Amount: \$302.50 (includes tax)"
echo ""

# 2. Get the Purchase Order
echo "üìÑ Step 2: Retrieving Purchase Order details..."
curl -s -X GET http://localhost:3001/api/po/$PO_ID | jq '.data | {poNumber, status, totalAmount, lineItems: .lineItems | length}'
echo ""

# 3. Submit for approval
echo "üìã Step 3: Submitting PO for approval..."
curl -s -X PUT http://localhost:3001/api/po/$PO_ID/update \
  -H "Content-Type: application/json" \
  -d '{"status": "submitted"}' | jq '.data | {poNumber, status, updatedAt}'
echo ""

# 4. Approve the PO
echo "‚úÖ Step 4: Approving the Purchase Order..."
curl -s -X PUT http://localhost:3001/api/po/$PO_ID/update \
  -H "Content-Type: application/json" \
  -d '{"status": "approved"}' | jq '.data | {poNumber, status, updatedAt}'
echo ""

# 5. Create and upload a document
echo "üìé Step 5: Creating and uploading a supporting document..."
echo "Invoice for PO $PO_NUMBER - Fresh Foods Supplier
Date: $(date)
Items:
- Fresh Tomatoes: 50 units @ \$2.50 = \$125.00
- Extra Virgin Olive Oil: 10 units @ \$15.00 = \$150.00
Subtotal: \$275.00
Tax: \$27.50
Total: \$302.50

Terms: Net 30 days
Delivery: Urgent" > /tmp/po-invoice-$PO_NUMBER.txt

# Upload the document (note: this will fail due to file type restriction, demonstrating validation)
echo "   Attempting to upload text file (should fail due to file type validation)..."
UPLOAD_RESULT=$(curl -s -X POST http://localhost:3001/api/po/$PO_ID/documents \
  -F "documents=@/tmp/po-invoice-$PO_NUMBER.txt")
echo "   Result: $(echo $UPLOAD_RESULT | jq -r '.message')"

# Create a PDF version (simulated by changing extension)
echo "   Creating PDF version..."
cp /tmp/po-invoice-$PO_NUMBER.txt /tmp/po-invoice-$PO_NUMBER.pdf
curl -s -X POST http://localhost:3001/api/po/$PO_ID/documents \
  -F "documents=@/tmp/po-invoice-$PO_NUMBER.pdf;type=application/pdf" | jq '.data[0] | {fileName, originalName, size, uploadedAt}'
echo ""

# 6. Process the PO
echo "üè≠ Step 6: Processing the Purchase Order..."
curl -s -X PUT http://localhost:3001/api/po/$PO_ID/update \
  -H "Content-Type: application/json" \
  -d '{"status": "processed"}' | jq '.data | {poNumber, status, updatedAt}'
echo ""

# 7. Final verification
echo "üîç Step 7: Final verification - retrieving complete PO with documents..."
FINAL_PO=$(curl -s -X GET http://localhost:3001/api/po/$PO_ID)
echo "   PO Status: $(echo $FINAL_PO | jq -r '.data.status')"
echo "   Documents: $(echo $FINAL_PO | jq -r '.data.documents | length') attached"
echo "   Line Items: $(echo $FINAL_PO | jq -r '.data.lineItems | length')"
echo "   Total Value: \$$(echo $FINAL_PO | jq -r '.data.totalAmount')"
echo ""

# 8. Demonstrate error handling
echo "‚ùå Step 8: Demonstrating error handling..."
echo "   Attempting invalid status transition (should fail)..."
INVALID_RESULT=$(curl -s -X PUT http://localhost:3001/api/po/$PO_ID/update \
  -H "Content-Type: application/json" \
  -d '{"status": "draft"}')
echo "   Result: $(echo $INVALID_RESULT | jq -r '.message')"

echo "   Attempting to get non-existent PO (should return 404)..."
NOTFOUND_RESULT=$(curl -s -X GET http://localhost:3001/api/po/non-existent-id)
echo "   Result: $(echo $NOTFOUND_RESULT | jq -r '.error')"
echo ""

# Cleanup
echo "üßπ Cleaning up temporary files..."
rm -f /tmp/po-invoice-$PO_NUMBER.txt /tmp/po-invoice-$PO_NUMBER.pdf

echo "======================================"
echo "üéâ Demo completed successfully!"
echo ""
echo "Summary of PO workflow:"
echo "1. ‚úÖ Created PO in DRAFT status"
echo "2. ‚úÖ Retrieved PO details"
echo "3. ‚úÖ Submitted PO for approval"
echo "4. ‚úÖ Approved PO"
echo "5. ‚úÖ Uploaded supporting document"
echo "6. ‚úÖ Processed PO"
echo "7. ‚úÖ Verified final state"
echo "8. ‚úÖ Demonstrated error handling"
echo ""
echo "The PO processing system is fully functional! üöÄ"