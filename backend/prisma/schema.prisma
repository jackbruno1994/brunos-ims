// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models for Bruno's IMS

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  location    String
  country     String
  address     String
  phone       String
  email       String
  managerId   String
  status      RestaurantStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  menuItems   MenuItem[]
  suppliers   Supplier[]
  inventory   InventoryItem[]
  orders      PurchaseOrder[]

  @@map("restaurants")
}

model User {
  id           String     @id @default(cuid())
  firstName    String
  lastName     String
  email        String     @unique
  passwordHash String
  role         UserRole   @default(STAFF)
  restaurantId String?
  country      String
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdOrders PurchaseOrder[] @relation("OrderCreatedBy")
  stockMovements StockMovement[] @relation("MovementCreatedBy")

  @@map("users")
}

model MenuItem {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  currency      String   @default("USD")
  category      String
  restaurantId  String
  availability  Boolean  @default(true)
  allergens     String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("menu_items")
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  contactName  String
  email        String
  phone        String
  address      String
  country      String
  restaurantId String
  status       SupplierStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       PurchaseOrder[]
  items        InventoryItem[]

  @@map("suppliers")
}

model InventoryItem {
  id           String   @id @default(cuid())
  sku          String   @unique
  name         String
  description  String?
  category     String
  unit         String   // e.g., "kg", "lbs", "pieces"
  unitPrice    Decimal  @db.Decimal(10, 2)
  minStock     Int      @default(0)
  maxStock     Int?
  currentStock Int      @default(0)
  restaurantId String
  supplierId   String?
  status       ItemStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  supplier       Supplier?  @relation(fields: [supplierId], references: [id])
  stockMovements StockMovement[]
  orderItems     PurchaseOrderItem[]

  @@map("inventory_items")
}

model StockMovement {
  id          String   @id @default(cuid())
  itemId      String
  type        MovementType
  quantity    Int
  reason      String?
  reference   String?  // e.g., order number, adjustment reason
  createdBy   String
  createdAt   DateTime @default(now())

  // Relations
  item        InventoryItem @relation(fields: [itemId], references: [id])
  user        User @relation("MovementCreatedBy", fields: [createdBy], references: [id])

  @@map("stock_movements")
}

model PurchaseOrder {
  id           String   @id @default(cuid())
  orderNumber  String   @unique
  supplierId   String
  restaurantId String
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(12, 2)
  currency     String      @default("USD")
  orderDate    DateTime    @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdBy    String
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  creator      User @relation("OrderCreatedBy", fields: [createdBy], references: [id])
  items        PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  orderId         String
  itemId          String
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(12, 2)
  receivedQty     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  order           PurchaseOrder @relation(fields: [orderId], references: [id])
  item            InventoryItem @relation(fields: [itemId], references: [id])

  @@map("purchase_order_items")
}

// Enums
enum RestaurantStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  RECEIVED
  CANCELLED
}