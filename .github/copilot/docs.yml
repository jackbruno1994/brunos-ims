# Documentation Standards Configuration - Complete Coverage
# OpenAPI/Swagger, JSDoc, README templates, Contributing Guidelines, Security Policy

# OpenAPI/Swagger Configuration
openapi:
  # API Documentation Standards
  version: '3.0.3'

  info:
    title: "Bruno's IMS API"
    description: "Comprehensive API for Bruno's Integrated Management System"
    version: '1.0.0'
    contact:
      name: "Bruno's IMS Development Team"
      email: 'dev@brunos-ims.com'
      url: 'https://github.com/jackbruno1994/brunos-ims'
    license:
      name: 'MIT'
      url: 'https://opensource.org/licenses/MIT'
    termsOfService: 'https://brunos-ims.com/terms'

  # Server Configuration
  servers:
    - url: 'https://api.brunos-ims.com/v1'
      description: 'Production server'
    - url: 'https://staging-api.brunos-ims.com/v1'
      description: 'Staging server'
    - url: 'http://localhost:3001/api/v1'
      description: 'Development server'

  # Security Schemes
  security:
    - BearerAuth: []

  components:
    securitySchemes:
      BearerAuth:
        type: 'http'
        scheme: 'bearer'
        bearerFormat: 'JWT'
        description: 'JWT token authentication'

    # Common Response Schemas
    responses:
      BadRequest:
        description: 'Bad request'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

      Unauthorized:
        description: 'Unauthorized'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

      Forbidden:
        description: 'Forbidden'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

      NotFound:
        description: 'Resource not found'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

      InternalServerError:
        description: 'Internal server error'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

    # Common Schemas
    schemas:
      Error:
        type: 'object'
        required: ['error', 'message', 'timestamp']
        properties:
          error:
            type: 'string'
            description: 'Error code'
          message:
            type: 'string'
            description: 'Human-readable error message'
          timestamp:
            type: 'string'
            format: 'date-time'
            description: 'Error timestamp'
          details:
            type: 'object'
            description: 'Additional error details'

      PaginationInfo:
        type: 'object'
        properties:
          page:
            type: 'integer'
            minimum: 1
            description: 'Current page number'
          limit:
            type: 'integer'
            minimum: 1
            maximum: 100
            description: 'Items per page'
          total:
            type: 'integer'
            minimum: 0
            description: 'Total number of items'
          totalPages:
            type: 'integer'
            minimum: 0
            description: 'Total number of pages'

  # Documentation Requirements
  documentation_standards:
    # Endpoint Documentation
    endpoints:
      summary_required: true
      description_required: true
      examples_required: true
      response_codes_required: true
      error_responses_required: true

    # Parameter Documentation
    parameters:
      description_required: true
      example_required: true
      validation_rules: true
      default_values: true

    # Schema Documentation
    schemas:
      description_required: true
      property_descriptions: true
      validation_constraints: true
      examples_required: true

# JSDoc Configuration
jsdoc:
  # JSDoc Standards
  configuration:
    source:
      include: ['./src']
      includePattern: "\\.(js|ts)$"
      exclude: ['node_modules/', 'dist/', 'coverage/']

    opts:
      destination: './docs/api/'
      recurse: true
      readme: './README.md'

    plugins:
      - 'plugins/markdown'
      - 'plugins/summarize'

    templates:
      cleverLinks: false
      monospaceLinks: false

  # Documentation Requirements
  required_tags:
    functions:
      - '@description'
      - '@param'
      - '@returns'
      - '@example'
      - '@since'

    classes:
      - '@description'
      - '@constructor'
      - '@param'
      - '@example'
      - '@since'

    modules:
      - '@module'
      - '@description'
      - '@author'
      - '@since'

  # JSDoc Comment Standards
  comment_standards:
    format: 'block_comment'
    line_length: 80
    alignment: 'left'
    spacing: 'consistent'

    # Example Format
    example_format: |
      /**
       * Brief description of the function
       * 
       * Detailed description providing more context about the function's
       * purpose, behavior, and any important considerations.
       * 
       * @param {string} param1 - Description of the first parameter
       * @param {number} [param2=10] - Description of optional parameter with default
       * @param {Object} options - Configuration options
       * @param {boolean} options.flag - Description of option flag
       * @returns {Promise<Object>} Description of return value
       * @throws {Error} When invalid parameters are provided
       * 
       * @example
       * // Basic usage
       * const result = await myFunction('test', 20, { flag: true });
       * 
       * @example
       * // With default parameters
       * const result = await myFunction('test');
       * 
       * @since 1.0.0
       * @author Development Team
       */

# README.md Template Standards
readme:
  # Template Structure
  template:
    sections:
      - title: 'Project Title'
        required: true

      - title: 'Description'
        required: true
        content: |
          Brief description of what the project does and why it exists.
          Include key features and benefits.

      - title: 'Table of Contents'
        required: false
        auto_generated: true

      - title: 'Installation'
        required: true
        content: |
          Step-by-step installation instructions for different environments.
          Include prerequisites and system requirements.

      - title: 'Usage'
        required: true
        content: |
          Basic usage examples and common use cases.
          Include code examples and expected outputs.

      - title: 'API Documentation'
        required: true
        content: |
          Link to detailed API documentation.
          Quick reference for main endpoints.

      - title: 'Configuration'
        required: true
        content: |
          Environment variables and configuration options.
          Security considerations and best practices.

      - title: 'Development'
        required: true
        content: |
          Development setup instructions.
          Testing guidelines and coverage requirements.
          Contribution workflow.

      - title: 'Deployment'
        required: true
        content: |
          Deployment instructions for different environments.
          Docker configuration and orchestration.

      - title: 'Security'
        required: true
        content: |
          Security considerations and best practices.
          Link to detailed security policy.

      - title: 'Contributing'
        required: true
        content: |
          Link to contributing guidelines.
          Code of conduct reference.

      - title: 'License'
        required: true
        content: |
          License information and attribution requirements.

      - title: 'Support'
        required: true
        content: |
          How to get help and report issues.
          Community resources and documentation.

  # Content Standards
  standards:
    badges:
      required:
        - 'build_status'
        - 'coverage'
        - 'license'
        - 'version'

      optional:
        - 'downloads'
        - 'stars'
        - 'vulnerabilities'

    formatting:
      code_blocks: 'syntax_highlighted'
      images: 'descriptive_alt_text'
      links: 'descriptive_text'
      headers: 'consistent_hierarchy'

# Contributing Guidelines
contributing:
  # Guidelines Structure
  structure:
    sections:
      - title: 'Code of Conduct'
        content: |
          Reference to code of conduct and community standards.
          Enforcement policies and reporting procedures.

      - title: 'Getting Started'
        content: |
          Development environment setup.
          Building and testing instructions.
          Project structure overview.

      - title: 'Development Workflow'
        content: |
          Git workflow and branching strategy.
          Pull request process and requirements.
          Code review guidelines.

      - title: 'Coding Standards'
        content: |
          Style guide and formatting requirements.
          Testing requirements and coverage expectations.
          Documentation requirements.

      - title: 'Submitting Changes'
        content: |
          Pull request template and checklist.
          Commit message conventions.
          Release process participation.

      - title: 'Community'
        content: |
          Communication channels and etiquette.
          Recognition and acknowledgment process.

  # Contribution Requirements
  requirements:
    pull_requests:
      - 'descriptive_title'
      - 'detailed_description'
      - 'linked_issue'
      - 'tests_included'
      - 'documentation_updated'
      - 'changelog_entry'

    commits:
      - 'conventional_commit_format'
      - 'atomic_changes'
      - 'descriptive_messages'
      - 'signed_commits'

    code_quality:
      - 'linting_passes'
      - 'tests_pass'
      - 'coverage_maintained'
      - 'documentation_current'

# Security Policy
security_policy:
  # Policy Structure
  structure:
    sections:
      - title: 'Supported Versions'
        content: |
          Currently supported versions and their security update status.
          End-of-life timeline for older versions.

      - title: 'Reporting Vulnerabilities'
        content: |
          Responsible disclosure process and contact information.
          Response timeline expectations.

      - title: 'Security Measures'
        content: |
          Security controls and monitoring in place.
          Data protection and privacy considerations.

      - title: 'Incident Response'
        content: |
          Security incident handling procedures.
          Communication plan during incidents.

  # Vulnerability Reporting
  reporting:
    contact:
      email: 'security@brunos-ims.com'
      pgp_key: 'available_on_keyservers'

    process:
      - 'private_report_submission'
      - 'acknowledgment_within_24h'
      - 'assessment_within_72h'
      - 'regular_updates_provided'
      - 'coordinated_disclosure'

    timeline:
      acknowledgment: '24 hours'
      initial_response: '72 hours'
      status_updates: 'weekly'
      fix_timeline: '30-90 days'

# Documentation Generation
generation:
  # Automated Documentation
  automation:
    api_docs:
      tool: 'swagger-jsdoc'
      source: 'code_annotations'
      output: 'docs/api'
      format: 'html'
      auto_update: true

    code_docs:
      tool: 'typedoc'
      source: 'typescript_files'
      output: 'docs/code'
      format: 'html'
      include_private: false

    changelog:
      tool: 'conventional-changelog'
      source: 'git_commits'
      output: 'CHANGELOG.md'
      format: 'keepachangelog'
      auto_update: true

  # Documentation Validation
  validation:
    spelling:
      tool: 'cspell'
      dictionaries: ['technical', 'business']

    links:
      tool: 'markdown-link-check'
      exclude_patterns: ['localhost', 'example.com']

    formatting:
      tool: 'markdownlint'
      rules: 'strict'

    accuracy:
      code_examples: 'automated_testing'
      api_examples: 'integration_testing'

# Documentation Hosting
hosting:
  # GitHub Pages Configuration
  github_pages:
    source: 'docs/'
    theme: 'minimal'
    custom_domain: 'docs.brunos-ims.com'

  # Documentation Site Structure
  site_structure:
    - 'Home'
    - 'Getting Started'
    - 'API Reference'
    - 'Code Documentation'
    - 'Tutorials'
    - 'Examples'
    - 'Contributing'
    - 'Security'
    - 'Changelog'

# Documentation Maintenance
maintenance:
  # Review Schedule
  review:
    frequency: 'monthly'
    scope: 'all_documentation'
    reviewers: ['development_team', 'product_team']

  # Update Triggers
  update_triggers:
    - 'code_changes'
    - 'api_changes'
    - 'feature_releases'
    - 'security_updates'
    - 'user_feedback'

  # Quality Metrics
  metrics:
    completeness: '90%'
    accuracy: '95%'
    freshness: '30_days'
    user_satisfaction: '4.0/5.0'
