# CI/CD Pipeline Configuration - Automated Workflow
# GitHub Actions, Automated Testing, Quality Gates, Security Scanning, Deployment

# GitHub Actions Workflow Configuration
workflows:
  # Main CI/CD Pipeline
  ci_cd:
    name: 'CI/CD Pipeline'
    triggers:
      push:
        branches: ['main', 'develop']
      pull_request:
        branches: ['main', 'develop']
      schedule:
        - cron: '0 2 * * 1' # Weekly security scan

    # Environment Variables
    env:
      NODE_VERSION: '18.x'
      REGISTRY: 'ghcr.io'
      IMAGE_NAME: '${{ github.repository }}'

    # Job Dependencies
    strategy:
      matrix:
        node_version: ['18.x', '20.x']
        os: ['ubuntu-latest']

  # Security Scanning Workflow
  security:
    name: 'Security Scanning'
    triggers:
      push:
        branches: ['main']
      pull_request:
        branches: ['main']
      schedule:
        - cron: '0 3 * * *' # Daily security scan

# Pipeline Stages
stages:
  # Stage 1: Setup & Dependencies
  setup:
    name: 'Setup & Dependencies'
    runs_on: 'ubuntu-latest'
    timeout: 10

    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v4'
        with:
          fetch_depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node_version: '${{ matrix.node_version }}'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci --prefer-offline --no-audit
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: 'Cache Dependencies'
        uses: 'actions/cache@v3'
        with:
          path: |
            ~/.npm
            node_modules
            backend/node_modules
            frontend/node_modules
          key: "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}"

  # Stage 2: Code Quality & Linting
  quality:
    name: 'Code Quality & Linting'
    needs: ['setup']
    runs_on: 'ubuntu-latest'
    timeout: 15

    steps:
      - name: 'ESLint Backend'
        run: 'cd backend && npm run lint'

      - name: 'ESLint Frontend'
        run: 'cd frontend && npm run lint'

      - name: 'Prettier Check'
        run: 'npm run format:check'

      - name: 'TypeScript Compilation'
        run: |
          cd backend && npm run type-check
          cd ../frontend && npm run type-check

      - name: 'Dependency Audit'
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

  # Stage 3: Testing
  testing:
    name: 'Automated Testing'
    needs: ['quality']
    runs_on: 'ubuntu-latest'
    timeout: 20

    services:
      postgres:
        image: 'postgres:15'
        env:
          POSTGRES_PASSWORD: 'postgres'
          POSTGRES_DB: 'brunos_ims_test'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 'Unit Tests Backend'
        run: 'cd backend && npm test -- --coverage --verbose'
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/brunos_ims_test'

      - name: 'Unit Tests Frontend'
        run: 'cd frontend && npm test -- --coverage --verbose --watchAll=false'

      - name: 'Integration Tests'
        run: 'cd backend && npm run test:integration'
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/brunos_ims_test'

      - name: 'E2E Tests'
        run: 'npm run test:e2e'
        env:
          BASE_URL: 'http://localhost:3000'

      - name: 'Upload Coverage Reports'
        uses: 'codecov/codecov-action@v3'
        with:
          files: |
            ./backend/coverage/lcov.info
            ./frontend/coverage/lcov.info
          fail_ci_if_error: true

  # Stage 4: Security Scanning
  security_scanning:
    name: 'Security Scanning'
    needs: ['quality']
    runs_on: 'ubuntu-latest'
    timeout: 15

    permissions:
      actions: read
      contents: read
      security_events: write

    steps:
      - name: 'SAST - CodeQL'
        uses: 'github/codeql-action/init@v2'
        with:
          languages: 'javascript,typescript'
          queries: 'security-extended,security-and-quality'

      - name: 'SAST - CodeQL Analysis'
        uses: 'github/codeql-action/analyze@v2'

      - name: 'Dependency Vulnerability Scan'
        run: |
          npm audit --audit-level=moderate --production
          cd backend && npm audit --audit-level=moderate --production
          cd ../frontend && npm audit --audit-level=moderate --production

      - name: 'Container Security Scan'
        if: contains(github.event_name, 'push')
        uses: 'aquasecurity/trivy-action@master'
        with:
          scan_type: 'fs'
          scan_ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'Upload Trivy Results'
        if: contains(github.event_name, 'push')
        uses: 'github/codeql-action/upload-sarif@v2'
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 'Secret Scanning'
        uses: 'trufflesecurity/trufflehog@main'
        with:
          path: './'
          base: 'main'
          head: 'HEAD'

  # Stage 5: Build & Package
  build:
    name: 'Build & Package'
    needs: ['testing', 'security_scanning']
    runs_on: 'ubuntu-latest'
    timeout: 15

    outputs:
      backend_image: '${{ steps.backend_meta.outputs.tags }}'
      frontend_image: '${{ steps.frontend_meta.outputs.tags }}'

    steps:
      - name: 'Build Backend'
        run: 'cd backend && npm run build'

      - name: 'Build Frontend'
        run: 'cd frontend && npm run build'

      - name: 'Archive Backend Build'
        uses: 'actions/upload-artifact@v3'
        with:
          name: 'backend-build'
          path: 'backend/dist/'
          retention_days: 30

      - name: 'Archive Frontend Build'
        uses: 'actions/upload-artifact@v3'
        with:
          name: 'frontend-build'
          path: 'frontend/dist/'
          retention_days: 30

      - name: 'Docker Backend Metadata'
        id: 'backend_meta'
        uses: 'docker/metadata-action@v4'
        with:
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend'
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 'Docker Frontend Metadata'
        id: 'frontend_meta'
        uses: 'docker/metadata-action@v4'
        with:
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend'
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

# Quality Gates Configuration
quality_gates:
  # Coverage Requirements
  coverage:
    backend:
      minimum: 80
      lines: 80
      functions: 80
      branches: 75
      statements: 80

    frontend:
      minimum: 75
      lines: 75
      functions: 75
      branches: 70
      statements: 75

  # Code Quality Metrics
  code_quality:
    complexity:
      max_cyclomatic: 10
      max_cognitive: 15

    maintainability:
      min_index: 70
      max_debt_ratio: 5

    reliability:
      max_bugs: 0
      max_vulnerabilities: 0
      max_security_hotspots: 0

    duplication:
      max_percentage: 3
      max_lines: 1000

  # Performance Requirements
  performance:
    build_time:
      backend: '5m'
      frontend: '3m'

    bundle_size:
      frontend_max: '500KB'
      backend_max: '50MB'

    lighthouse:
      performance: 90
      accessibility: 95
      best_practices: 90
      seo: 90

# Environment-Specific Deployment
deployments:
  # Development Environment
  development:
    environment: 'development'
    url: 'https://dev.brunos-ims.com'
    auto_deploy: true

    triggers:
      - 'push to develop branch'

    steps:
      - 'deploy to development cluster'
      - 'run smoke tests'
      - 'update deployment status'

  # Staging Environment
  staging:
    environment: 'staging'
    url: 'https://staging.brunos-ims.com'
    auto_deploy: false
    approval_required: true

    triggers:
      - 'manual trigger'
      - 'successful development deployment'

    steps:
      - 'deploy to staging cluster'
      - 'run full test suite'
      - 'performance testing'
      - 'security validation'
      - 'user acceptance testing'

  # Production Environment
  production:
    environment: 'production'
    url: 'https://brunos-ims.com'
    auto_deploy: false
    approval_required: true
    reviewers: ['admin-team']

    triggers:
      - 'manual trigger only'
      - 'release tag creation'

    steps:
      - 'backup current system'
      - 'blue-green deployment'
      - 'health checks'
      - 'rollback capability'
      - 'monitoring alerts'

# Notification Configuration
notifications:
  # Success Notifications
  success:
    channels: ['slack']
    conditions:
      - 'production deployment'
      - 'security scan clear'

  # Failure Notifications
  failure:
    channels: ['slack', 'email']
    conditions:
      - 'any pipeline failure'
      - 'security vulnerabilities found'
      - 'quality gates failed'

  # Warning Notifications
  warnings:
    channels: ['slack']
    conditions:
      - 'coverage below threshold'
      - 'performance degradation'
      - 'dependency vulnerabilities'

# Monitoring & Observability
monitoring:
  # Deployment Monitoring
  deployment:
    health_checks: true
    performance_monitoring: true
    error_tracking: true
    uptime_monitoring: true

  # Pipeline Monitoring
  pipeline:
    execution_time_tracking: true
    failure_rate_monitoring: true
    resource_usage_tracking: true
    trend_analysis: true

# Rollback Strategy
rollback:
  # Automatic Rollback Triggers
  automatic:
    - 'health_check_failure'
    - 'error_rate_spike'
    - 'performance_degradation'

  # Manual Rollback Process
  manual:
    approval_required: true
    steps:
      - 'identify rollback version'
      - 'execute rollback'
      - 'verify system health'
      - 'notify stakeholders'

# Archive & Cleanup
cleanup:
  # Artifact Retention
  artifacts:
    build_artifacts: '30 days'
    test_reports: '90 days'
    security_scans: '1 year'
    deployment_logs: '6 months'

  # Cleanup Schedule
  schedule:
    frequency: 'weekly'
    cleanup_old_branches: true
    cleanup_old_images: true
    cleanup_temp_files: true
