name: Code Quality & Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  NODE_VERSION: '18.x'

jobs:
  # Code Quality Metrics
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci --legacy-peer-deps
          cd ../frontend && npm ci --legacy-peer-deps

      - name: Run ESLint with Metrics
        run: |
          echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Backend ESLint
          echo "### Backend ESLint Analysis" >> $GITHUB_STEP_SUMMARY
          cd backend
          npm run lint > ../eslint-backend.log 2>&1 || true
          cd ..

          # Frontend ESLint
          echo "### Frontend ESLint Analysis" >> $GITHUB_STEP_SUMMARY
          cd frontend
          npm run lint > ../eslint-frontend.log 2>&1 || true
          cd ..

          # Count issues
          BACKEND_ISSUES=$(grep -c "problem" eslint-backend.log || echo "0")
          FRONTEND_ISSUES=$(grep -c "problem" eslint-frontend.log || echo "0")

          echo "| Component | Issues Found |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | $BACKEND_ISSUES |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | $FRONTEND_ISSUES |" >> $GITHUB_STEP_SUMMARY

      - name: TypeScript Compilation Check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### TypeScript Compilation" >> $GITHUB_STEP_SUMMARY

          # Backend TypeScript check
          cd backend
          npm run type-check > ../ts-backend.log 2>&1
          BACKEND_TS_STATUS=$?
          cd ..

          # Frontend TypeScript check
          cd frontend
          npm run type-check > ../ts-frontend.log 2>&1
          FRONTEND_TS_STATUS=$?
          cd ..

          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | $( [ $BACKEND_TS_STATUS -eq 0 ] && echo '✅ Pass' || echo '❌ Fail' ) |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | $( [ $FRONTEND_TS_STATUS -eq 0 ] && echo '✅ Pass' || echo '❌ Fail' ) |" >> $GITHUB_STEP_SUMMARY

      - name: Code Complexity Analysis
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY

          # Install complexity analysis tools
          npm install -g complexity-report

          # Analyze backend complexity
          echo "#### Backend Complexity" >> $GITHUB_STEP_SUMMARY
          find backend/src -name "*.ts" -type f | head -10 | xargs complexity-report --output minimal | head -5 >> $GITHUB_STEP_SUMMARY || echo "Backend analysis failed" >> $GITHUB_STEP_SUMMARY

          # Analyze frontend complexity
          echo "#### Frontend Complexity" >> $GITHUB_STEP_SUMMARY
          find frontend/src -name "*.ts" -o -name "*.tsx" -type f | head -10 | xargs complexity-report --output minimal | head -5 >> $GITHUB_STEP_SUMMARY || echo "Frontend analysis failed" >> $GITHUB_STEP_SUMMARY

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: |
            eslint-*.log
            ts-*.log
          retention-days: 30

  # Test Coverage Analysis
  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brunos_ims_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci --legacy-peer-deps
          cd ../frontend && npm ci --legacy-peer-deps

      - name: Run Backend Tests with Coverage
        run: |
          cd backend
          npm run test:coverage 2>/dev/null || npm test || echo "Backend tests not configured"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/brunos_ims_test

      - name: Run Frontend Tests with Coverage
        run: |
          cd frontend
          npm run test:coverage 2>/dev/null || npm test || echo "Frontend tests not configured"

      - name: Generate Coverage Report
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for coverage files and report
          if [ -f "backend/coverage/lcov.info" ]; then
            echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated for backend" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ No coverage report found for backend" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "frontend/coverage/lcov.info" ]; then
            echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated for frontend" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ No coverage report found for frontend" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            backend/coverage/
            frontend/coverage/
          retention-days: 30

  # Performance Benchmarking
  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci --legacy-peer-deps
          cd ../frontend && npm ci --legacy-peer-deps

      - name: Build Applications
        run: |
          cd backend && npm run build || echo "Backend build failed"
          cd ../frontend && npm run build || echo "Frontend build failed"

      - name: Bundle Size Analysis
        run: |
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Backend bundle analysis
          if [ -d "backend/dist" ]; then
            BACKEND_SIZE=$(du -sh backend/dist | cut -f1)
            echo "| Component | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| Backend Bundle | $BACKEND_SIZE |" >> $GITHUB_STEP_SUMMARY
          fi

          # Frontend bundle analysis
          if [ -d "frontend/dist" ]; then
            FRONTEND_SIZE=$(du -sh frontend/dist | cut -f1)
            echo "| Frontend Bundle | $FRONTEND_SIZE |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./.github/lighthouse/lighthouse.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Create Lighthouse Config
        run: |
          mkdir -p .github/lighthouse
          cat > .github/lighthouse/lighthouse.json <<EOF
          {
            "ci": {
              "collect": {
                "staticDistDir": "./frontend/dist",
                "url": ["http://localhost:3000"]
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.9}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["error", {"minScore": 0.9}],
                  "categories:seo": ["error", {"minScore": 0.9}]
                }
              }
            }
          }
          EOF

  # Code Maintainability Index
  maintainability:
    name: Code Maintainability Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Analysis Tools
        run: |
          npm install -g jscpd

      - name: Duplicate Code Detection
        run: |
          echo "## 🔍 Code Duplication Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run duplicate detection
          jscpd --pattern "**/*.{ts,tsx,js,jsx}" --min-lines 5 --format "console" || true

          echo "Duplicate code analysis completed" >> $GITHUB_STEP_SUMMARY

      - name: Technical Debt Assessment
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 💸 Technical Debt Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count TODO/FIXME comments
          TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | wc -l || echo "0")

          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| TODO/FIXME Comments | $TODO_COUNT |" >> $GITHUB_STEP_SUMMARY

          # File count analysis
          TS_FILES=$(find . -name "*.ts" -o -name "*.tsx" | wc -l)
          JS_FILES=$(find . -name "*.js" -o -name "*.jsx" | wc -l)

          echo "| TypeScript Files | $TS_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Files | $JS_FILES |" >> $GITHUB_STEP_SUMMARY

  # Quality Summary Dashboard
  quality-summary:
    name: Quality Metrics Summary
    needs: [code-quality, test-coverage, performance-benchmark, maintainability]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate Quality Dashboard
        run: |
          echo "# 📊 Code Quality Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overall Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | ${{ needs.test-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-benchmark.result == 'success' && '✅ Passed' || '⚠️ Check Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Maintainability | ${{ needs.maintainability.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quality Gate Status" >> $GITHUB_STEP_SUMMARY

          # Overall quality gate
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.test-coverage.result }}" == "success" && "${{ needs.maintainability.result }}" == "success" ]]; then
            echo "🟢 **QUALITY GATE: PASSED** - All quality checks successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔴 **QUALITY GATE: FAILED** - One or more quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi
