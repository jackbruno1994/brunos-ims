name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'

jobs:
  # Setup and Dependencies
  setup:
    name: Setup & Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Root Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Backend Dependencies
        run: cd backend && npm ci --prefer-offline --no-audit

      - name: Install Frontend Dependencies
        run: cd frontend && npm ci --prefer-offline --no-audit

  # Code Quality & Linting
  quality:
    name: Code Quality & Linting
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: ESLint Backend
        run: cd backend && npm run lint

      - name: ESLint Frontend
        run: cd frontend && npm run lint

      - name: Prettier Check
        run: npm run format:check

      - name: TypeScript Compilation Backend
        run: cd backend && npm run type-check

      - name: TypeScript Compilation Frontend
        run: cd frontend && npm run type-check

      - name: Dependency Audit
        run: |
          npm audit --audit-level=high --production || true
          cd backend && npm audit --audit-level=high --production || true
          cd ../frontend && npm audit --audit-level=high --production || true

  # Testing
  testing:
    name: Automated Testing
    needs: [quality]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brunos_ims_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Backend Tests
        run: cd backend && npm test || echo "Backend tests not configured yet"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/brunos_ims_test

      - name: Frontend Tests
        run: cd frontend && npm test || echo "Frontend tests not configured yet"

  # Security Scanning
  security:
    name: Security Scanning
    needs: [quality]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Dependency Vulnerability Scan
        run: |
          npm audit --audit-level=moderate --production || true
          cd backend && npm audit --audit-level=moderate --production || true
          cd ../frontend && npm audit --audit-level=moderate --production || true

  # Build & Package
  build:
    name: Build & Package
    needs: [testing, security]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd backend && npm ci --prefer-offline --no-audit
          cd ../frontend && npm ci --prefer-offline --no-audit

      - name: Build Backend
        run: cd backend && npm run build

      - name: Build Frontend
        run: cd frontend && npm run build

      - name: Archive Backend Build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 30

      - name: Archive Frontend Build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

  # Notification
  notify:
    name: Notification
    needs: [build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.build.result == 'success' }}
        run: echo "üéâ CI/CD Pipeline completed successfully!"

      - name: Notify Failure
        if: ${{ needs.build.result == 'failure' }}
        run: echo "‚ùå CI/CD Pipeline failed. Please check the logs."
