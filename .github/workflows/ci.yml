name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      api: ${{ steps.changes.outputs.api }}
      packages: ${{ steps.changes.outputs.packages }}
      db: ${{ steps.changes.outputs.db }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/**'
            api:
              - 'services/api/**'
            packages:
              - 'packages/**'
            db:
              - 'db/**'

  lint_test_build:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [web, api]
        include:
          - component: web
            condition: ${{ needs.changes.outputs.web == 'true' || needs.changes.outputs.packages == 'true' }}
          - component: api
            condition: ${{ needs.changes.outputs.api == 'true' }}
    
    if: matrix.condition
    
    steps:
      - uses: actions/checkout@v4
      
      # Web component
      - name: Setup Node.js
        if: matrix.component == 'web'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies (Web)
        if: matrix.component == 'web'
        run: |
          corepack enable
          pnpm install --frozen-lockfile
          
      - name: Lint and Type Check (Web)
        if: matrix.component == 'web'
        run: |
          pnpm -w lint
          pnpm -w typecheck
          
      - name: Test (Web)
        if: matrix.component == 'web'
        run: |
          pnpm -w test --coverage
          
      - name: Build (Web)
        if: matrix.component == 'web'
        run: |
          pnpm -w build
          
      # API component
      - name: Setup Python
        if: matrix.component == 'api'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies (API)
        if: matrix.component == 'api'
        run: |
          python -m pip install -U pip uv
          cd services/api
          uv pip install -r requirements.txt
          
      - name: Lint and Type Check (API)
        if: matrix.component == 'api'
        run: |
          cd services/api
          ruff check .
          mypy .
          
      - name: Test (API)
        if: matrix.component == 'api'
        run: |
          cd services/api
          pytest --cov=./ --cov-report=xml --cov-fail-under=70
          
      # Upload coverage reports
      - name: Upload coverage to Codecov
        if: (matrix.component == 'web' && needs.changes.outputs.web == 'true') || (matrix.component == 'api' && needs.changes.outputs.api == 'true')
        uses: codecov/codecov-action@v3
        with:
          files: |
            ${{ matrix.component == 'web' && './coverage/lcov.info' || '' }}
            ${{ matrix.component == 'api' && './services/api/coverage.xml' || '' }}
          fail_ci_if_error: true

  database_migration_check:
    needs: changes
    if: needs.changes.outputs.db == 'true'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brunos_ims_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile
          
      - name: Run database migrations
        run: |
          cd db
          pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/brunos_ims_test
          
      - name: Validate schema
        run: |
          cd db
          pnpm prisma validate
          
      - name: Generate Prisma client
        run: |
          cd db
          pnpm prisma generate

  security_scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Audit npm packages
        run: |
          corepack enable
          pnpm audit --audit-level moderate
          
      - name: Audit Python packages
        run: |
          pip install safety
          cd services/api
          safety check -r requirements.txt

  all_checks_passed:
    needs: [lint_test_build, database_migration_check, security_scan]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if all required jobs passed
        run: |
          # Check if any required job failed
          if [[ "${{ needs.lint_test_build.result }}" == "failure" ]] || 
             [[ "${{ needs.database_migration_check.result }}" == "failure" && "${{ needs.changes.outputs.db }}" == "true" ]] ||
             [[ "${{ needs.security_scan.result }}" == "failure" ]]; then
            echo "One or more required checks failed"
            exit 1
          fi
          echo "All checks passed successfully"